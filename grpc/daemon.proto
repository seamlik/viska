// gRPC services.

syntax = "proto3";

package viska.daemon;

import "database.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// Services provided by the application and the operating system.
service Platform {
  rpc CommitTransaction(stream viska.database.TransactionPayload) returns (google.protobuf.Empty) {}

  // Notifies that a new chat message has been received.
  //
  // The parameter is a message ID.
  rpc NotifyMessage(google.protobuf.BytesValue) returns (google.protobuf.Empty) {}

  rpc FindPeerById(google.protobuf.BytesValue) returns (viska.database.Peer) {}
}

// Represents a Node
service Node {
  // Updates the peer whitelist.
  //
  // The Node will starts fetching whatever data it needs from the Platform and calculates a new
  // peer whitelist.
  //
  // This list will be used when verifying the peer certificate of a TLS connection. Only peers
  // in this list are allowed to connect with the Node.
  rpc UpdatePeerWhitelist(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  rpc WatchVcardById(google.protobuf.BytesValue) returns (stream viska.database.Vcard) {}

  rpc WatchChatroomMessages(google.protobuf.BytesValue) returns (stream ChatroomMessagesSubscription) {}

  rpc WatchChatroom(google.protobuf.BytesValue) returns (stream viska.database.Chatroom) {}

  rpc WatchChatrooms(google.protobuf.Empty) returns (stream ChatroomsSubscription) {}
}

message ChatroomMessagesSubscription {
  repeated viska.database.Message messages = 1;
}

message ChatroomsSubscription {
  repeated viska.database.Chatroom chatrooms = 1;
}