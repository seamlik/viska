//! Database models and operations.

tonic::include_proto!("viska.database");

pub(crate) mod chatroom;
pub(crate) mod message;
pub(crate) mod peer;
pub(crate) mod vcard;

use crate::pki::Certificate;
use blake3::Hash;
use chrono::prelude::*;
use rusqlite::Connection;
use serde_bytes::ByteBuf;
use std::path::PathBuf;
use std::sync::Mutex;
use thiserror::Error;

/// THE hash function (BLAKE3) universally used in the project.
///
/// This is exported only because this algorithm isn't available in most languages or platform at moment.
#[riko::fun]
pub fn hash(src: &ByteBuf) -> ByteBuf {
    let raw_hash: [u8; 32] = blake3::hash(src).into();
    ByteBuf::from(raw_hash)
}

/// Serializes a timestamp to a floating point number.
///
/// By using a floating point number as the universal timestamp format, we can have arbitrary
/// precision on the time value.
pub(crate) fn float_from_time(src: DateTime<Utc>) -> f64 {
    src.timestamp() as f64 + src.timestamp_subsec_nanos() as f64 / 1_000_000_000.0
}

/// Converts a [Hash] to bytes.
pub(crate) fn bytes_from_hash(src: Hash) -> Vec<u8> {
    let raw_hash: [u8; 32] = src.into();
    raw_hash.to_vec()
}

#[derive(Default)]
pub struct Config {
    pub storage: Storage,
}

pub enum Storage {
    InMemory,
    OnDisk(PathBuf),
}

impl Default for Storage {
    fn default() -> Self {
        Self::InMemory
    }
}

pub(crate) struct Database {
    pub connection: Mutex<Connection>,
}

impl Database {
    pub fn create(config: Config) -> rusqlite::Result<Self> {
        let mut connection = match config.storage {
            Storage::InMemory => Connection::open_in_memory()?,
            Storage::OnDisk(path) => Connection::open(path)?,
        };

        connection
            .transaction()?
            .execute_batch(include_str!("database/migration/genesis.sql"))?;

        Ok(Self {
            connection: connection.into(),
        })
    }
}

fn unwrap_optional_row<T>(result: rusqlite::Result<T>) -> rusqlite::Result<Option<T>> {
    if let Err(rusqlite::Error::QueryReturnedNoRows) = result {
        Ok(None)
    } else {
        result.map(|inner| inner.into())
    }
}

/// Creates a profile with a newly generated account.
///
/// A profile is a directory of files that contains all data regarding an account on the device.
/// Such a directory is supposed to be placed at the user config directory, usually named with the
/// account ID.
///
/// # Filesystem Structure of an Account Profile
///
/// - User config directory (e.g. on Linux it's `~/.config/Viska`)
///   - `account`
///     - `0C88CF8B12C190651C4B98885D035D43F1E87C20ADC80B5ED439FF9C76FF2BE3` (Account ID)
///       - `certificate.der`
///       - `key.der`
///       - `database`
///         - `main.db`
///         - Maybe some auxilliary files generated by SQLite
///
/// # Parameters
///
/// * `base_data_dir`: The location of the `account` directory described above.
///
/// # Returns
///
/// The uppercase HEX of the generated account ID.
///
/// # TODO
///
/// * Async
#[riko::fun]
pub fn create_standard_profile(base_data_dir: PathBuf) -> Result<String, CreateProfileError> {
    let bundle = crate::pki::new_certificate();
    let account_id = bundle.certificate.id().to_hex().to_ascii_uppercase();

    let mut destination = base_data_dir;
    destination.push(&account_id);
    std::fs::create_dir_all(&destination)?;

    destination.push("certificate.der");
    std::fs::write(&destination, &bundle.certificate)?;

    destination.set_file_name("key.der");
    std::fs::write(&destination, &bundle.key)?;

    destination.set_file_name("database");
    destination.push("main.db");
    let database_config = Config {
        storage: Storage::OnDisk(destination),
    };
    Database::create(database_config)?;

    Ok(account_id)
}

/// Error when failed to create a profile.
#[derive(Error, Debug)]
#[error("Failed to create a profile")]
pub enum CreateProfileError {
    Database(#[from] rusqlite::Error),
    FileSystem(#[from] std::io::Error),
}
